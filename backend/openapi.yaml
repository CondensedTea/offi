openapi: 3.1.0
info:
  title: Offi backend API
paths:
  /match/{match_id}:
    get:
      operationId: GetLogsForMatch
      summary: Get logs associated with ETF2L match
      parameters:
        - name: match_id
          description: ETF2L match ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Match resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
        '404':
          description: 'ETF2L match does not exists or have not been completed'
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /log/{log_id}:
    get:
      operationId: GetMatchForLog
      summary: Get logs associated with given ETF2L match ID
      parameters:
        - name: log_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get log details
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/Match'
                  log:
                    type: object
                    properties:
                      demo_id:
                        type: integer
                required:
                  - match
                  - log
        '404':
          description: 'Log does not exists'
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /team/{id}:
    get:
      summary: Get team details
      operationId: GetTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/Team'
                required:
                  - team
        '404':
          description: 'Team does not exists'
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /players:
    get:
      deprecated: true
      summary: Get players by Steam IDs
      operationId: GetPlayers
      parameters:
        - name: id
          in: query
          explode: false
          style: form
          required: true
          schema:
            type: array
            maxItems: 20
            items:
              type: integer
              minimum: 1
        - name: with_recruitment_status
          in: query
          default: false
          schema:
              type: boolean
      responses:
        '200':
          description: List of resolved players
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/Player'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/etf2l/players:
    get:
      summary: Get players' details from ETF2L
      operationId: GetETF2LPlayers
      parameters:
        - name: id
          in: query
          explode: false
          style: form
          required: true
          schema:
            type: array
            maxItems: 20
            items:
              type: integer
              format: int64
              minimum: 1
        - name: with_recruitment_status
          in: query
          default: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of resolved players
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/ETF2LPlayer'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/rgl/players:
    get:
      summary: Get players' details from RGL
      operationId: GetRGLPlayers
      parameters:
        - name: id
          in: query
          explode: false
          style: form
          required: true
          schema:
            type: array
            maxItems: 20
            items:
              type: integer
              format: int64
              minimum: 1
      responses:
        '200':
          description: List of resolved players
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/RGLPlayer'
        default:
          $ref: '#/components/responses/Error'
components:
  schemas:
    Log:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        map:
          type: string
        played_at:
          type: string
          format: date-time
        is_secondary:
          type: boolean
        demo_id:
          type: integer
      required:
        - id
        - title
        - map
        - played_at
        - is_secondary
    Match:
      type: object
      properties:
        match_id:
          type: integer
        competition:
          type: string
        stage:
          type: string
        tier:
          type: string
      required:
        - match_id
        - competition
        - stage
        - tier
    Team:
      type: object
      properties:
        recruitment:
          $ref: '#/components/schemas/RecruitmentInfo'
      required:
        - recruitment
    Player:
      deprecated: true
      type: object
      properties:
        id:
          type: integer
        steam_id:
          type: string
        name:
          type: string
        bans:
          type: array
          items:
            $ref: '#/components/schemas/PlayerBan'
        recruitment:
          $ref: '#/components/schemas/RecruitmentInfo'
      required:
        - id
        - steam_id
        - name
        - bans
    ETF2LPlayer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        steam_id:
          type: integer
          format: int64
        name:
          type: string
        bans:
          type: array
          items:
            $ref: '#/components/schemas/PlayerBan'
        recruitment:
          $ref: '#/components/schemas/RecruitmentInfo'
      required:
        - id
        - steam_id
        - name
        - bans
    RGLPlayer:
      type: object
      properties:
        steam_id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - steam_id
        - name
    GameClass:
      type: string
      enum:
        - 'Demoman'
        - 'Engineer'
        - 'Heavy'
        - 'Medic'
        - 'Pyro'
        - 'Scout'
        - 'Sniper'
        - 'Soldier'
        - 'Spy'
    RecruitmentInfo:
      type: object
      properties:
        skill:
          type: string
        url:
          type: string
        classes:
          type: array
          items:
            $ref: '#/components/schemas/GameClass'
        game_mode:
          type: string
      required:
        - skill
        - url
        - classes
        - game_mode
    PlayerBan:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
        reason:
          type: string
      required:
        - start
        - end
        - reason
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
      example:
        error: 'doing stuff: an error has occurred'
  responses:
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
