// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetLogsForMatch implements GetLogsForMatch operation.
	//
	// Get logs associated with ETF2L match.
	//
	// GET /match/{match_id}
	GetLogsForMatch(ctx context.Context, params GetLogsForMatchParams) (GetLogsForMatchRes, error)
	// GetMatchForLog implements GetMatchForLog operation.
	//
	// Get logs associated with given ETF2L match ID.
	//
	// GET /log/{log_id}
	GetMatchForLog(ctx context.Context, params GetMatchForLogParams) (GetMatchForLogRes, error)
	// GetPlayers implements GetPlayers operation.
	//
	// Get players by Steam IDs.
	//
	// GET /players
	GetPlayers(ctx context.Context, params GetPlayersParams) (*GetPlayersOK, error)
	// GetTeam implements GetTeam operation.
	//
	// Get team details.
	//
	// GET /team/{id}
	GetTeam(ctx context.Context, params GetTeamParams) (GetTeamRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
