// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) getLogsForMatchRes() {}
func (*ErrorStatusCode) getMatchForLogRes()  {}

// Ref: #/components/schemas/GameClass
type GameClass string

const (
	GameClassDemoman  GameClass = "Demoman"
	GameClassEngineer GameClass = "Engineer"
	GameClassHeavy    GameClass = "Heavy"
	GameClassMedic    GameClass = "Medic"
	GameClassPyro     GameClass = "Pyro"
	GameClassScout    GameClass = "Scout"
	GameClassSniper   GameClass = "Sniper"
	GameClassSoldier  GameClass = "Soldier"
	GameClassSpy      GameClass = "Spy"
)

// AllValues returns all GameClass values.
func (GameClass) AllValues() []GameClass {
	return []GameClass{
		GameClassDemoman,
		GameClassEngineer,
		GameClassHeavy,
		GameClassMedic,
		GameClassPyro,
		GameClassScout,
		GameClassSniper,
		GameClassSoldier,
		GameClassSpy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GameClass) MarshalText() ([]byte, error) {
	switch s {
	case GameClassDemoman:
		return []byte(s), nil
	case GameClassEngineer:
		return []byte(s), nil
	case GameClassHeavy:
		return []byte(s), nil
	case GameClassMedic:
		return []byte(s), nil
	case GameClassPyro:
		return []byte(s), nil
	case GameClassScout:
		return []byte(s), nil
	case GameClassSniper:
		return []byte(s), nil
	case GameClassSoldier:
		return []byte(s), nil
	case GameClassSpy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GameClass) UnmarshalText(data []byte) error {
	switch GameClass(data) {
	case GameClassDemoman:
		*s = GameClassDemoman
		return nil
	case GameClassEngineer:
		*s = GameClassEngineer
		return nil
	case GameClassHeavy:
		*s = GameClassHeavy
		return nil
	case GameClassMedic:
		*s = GameClassMedic
		return nil
	case GameClassPyro:
		*s = GameClassPyro
		return nil
	case GameClassScout:
		*s = GameClassScout
		return nil
	case GameClassSniper:
		*s = GameClassSniper
		return nil
	case GameClassSoldier:
		*s = GameClassSoldier
		return nil
	case GameClassSpy:
		*s = GameClassSpy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetLogsForMatchOK struct {
	Logs []Log `json:"logs"`
}

// GetLogs returns the value of Logs.
func (s *GetLogsForMatchOK) GetLogs() []Log {
	return s.Logs
}

// SetLogs sets the value of Logs.
func (s *GetLogsForMatchOK) SetLogs(val []Log) {
	s.Logs = val
}

func (*GetLogsForMatchOK) getLogsForMatchRes() {}

type GetMatchForLogOK struct {
	Match Match               `json:"match"`
	Log   GetMatchForLogOKLog `json:"log"`
}

// GetMatch returns the value of Match.
func (s *GetMatchForLogOK) GetMatch() Match {
	return s.Match
}

// GetLog returns the value of Log.
func (s *GetMatchForLogOK) GetLog() GetMatchForLogOKLog {
	return s.Log
}

// SetMatch sets the value of Match.
func (s *GetMatchForLogOK) SetMatch(val Match) {
	s.Match = val
}

// SetLog sets the value of Log.
func (s *GetMatchForLogOK) SetLog(val GetMatchForLogOKLog) {
	s.Log = val
}

func (*GetMatchForLogOK) getMatchForLogRes() {}

type GetMatchForLogOKLog struct {
	DemoID OptInt `json:"demo_id"`
}

// GetDemoID returns the value of DemoID.
func (s *GetMatchForLogOKLog) GetDemoID() OptInt {
	return s.DemoID
}

// SetDemoID sets the value of DemoID.
func (s *GetMatchForLogOKLog) SetDemoID(val OptInt) {
	s.DemoID = val
}

type GetPlayersOK struct {
	Players []Player `json:"players"`
}

// GetPlayers returns the value of Players.
func (s *GetPlayersOK) GetPlayers() []Player {
	return s.Players
}

// SetPlayers sets the value of Players.
func (s *GetPlayersOK) SetPlayers(val []Player) {
	s.Players = val
}

// GetTeamNotFound is response for GetTeam operation.
type GetTeamNotFound struct{}

func (*GetTeamNotFound) getTeamRes() {}

type GetTeamOK struct {
	Team Team `json:"team"`
}

// GetTeam returns the value of Team.
func (s *GetTeamOK) GetTeam() Team {
	return s.Team
}

// SetTeam sets the value of Team.
func (s *GetTeamOK) SetTeam(val Team) {
	s.Team = val
}

func (*GetTeamOK) getTeamRes() {}

// Ref: #/components/schemas/Log
type Log struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Map         string    `json:"map"`
	PlayedAt    time.Time `json:"played_at"`
	IsSecondary bool      `json:"is_secondary"`
	DemoID      OptInt    `json:"demo_id"`
}

// GetID returns the value of ID.
func (s *Log) GetID() int {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Log) GetTitle() string {
	return s.Title
}

// GetMap returns the value of Map.
func (s *Log) GetMap() string {
	return s.Map
}

// GetPlayedAt returns the value of PlayedAt.
func (s *Log) GetPlayedAt() time.Time {
	return s.PlayedAt
}

// GetIsSecondary returns the value of IsSecondary.
func (s *Log) GetIsSecondary() bool {
	return s.IsSecondary
}

// GetDemoID returns the value of DemoID.
func (s *Log) GetDemoID() OptInt {
	return s.DemoID
}

// SetID sets the value of ID.
func (s *Log) SetID(val int) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Log) SetTitle(val string) {
	s.Title = val
}

// SetMap sets the value of Map.
func (s *Log) SetMap(val string) {
	s.Map = val
}

// SetPlayedAt sets the value of PlayedAt.
func (s *Log) SetPlayedAt(val time.Time) {
	s.PlayedAt = val
}

// SetIsSecondary sets the value of IsSecondary.
func (s *Log) SetIsSecondary(val bool) {
	s.IsSecondary = val
}

// SetDemoID sets the value of DemoID.
func (s *Log) SetDemoID(val OptInt) {
	s.DemoID = val
}

// Ref: #/components/schemas/Match
type Match struct {
	MatchID     int    `json:"match_id"`
	Competition string `json:"competition"`
	Stage       string `json:"stage"`
	Tier        string `json:"tier"`
}

// GetMatchID returns the value of MatchID.
func (s *Match) GetMatchID() int {
	return s.MatchID
}

// GetCompetition returns the value of Competition.
func (s *Match) GetCompetition() string {
	return s.Competition
}

// GetStage returns the value of Stage.
func (s *Match) GetStage() string {
	return s.Stage
}

// GetTier returns the value of Tier.
func (s *Match) GetTier() string {
	return s.Tier
}

// SetMatchID sets the value of MatchID.
func (s *Match) SetMatchID(val int) {
	s.MatchID = val
}

// SetCompetition sets the value of Competition.
func (s *Match) SetCompetition(val string) {
	s.Competition = val
}

// SetStage sets the value of Stage.
func (s *Match) SetStage(val string) {
	s.Stage = val
}

// SetTier sets the value of Tier.
func (s *Match) SetTier(val string) {
	s.Tier = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecruitmentInfo returns new OptRecruitmentInfo with value set to v.
func NewOptRecruitmentInfo(v RecruitmentInfo) OptRecruitmentInfo {
	return OptRecruitmentInfo{
		Value: v,
		Set:   true,
	}
}

// OptRecruitmentInfo is optional RecruitmentInfo.
type OptRecruitmentInfo struct {
	Value RecruitmentInfo
	Set   bool
}

// IsSet returns true if OptRecruitmentInfo was set.
func (o OptRecruitmentInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecruitmentInfo) Reset() {
	var v RecruitmentInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecruitmentInfo) SetTo(v RecruitmentInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecruitmentInfo) Get() (v RecruitmentInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecruitmentInfo) Or(d RecruitmentInfo) RecruitmentInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Player
type Player struct {
	ID          int                `json:"id"`
	SteamID     string             `json:"steam_id"`
	Name        string             `json:"name"`
	Bans        []PlayerBan        `json:"bans"`
	Recruitment OptRecruitmentInfo `json:"recruitment"`
}

// GetID returns the value of ID.
func (s *Player) GetID() int {
	return s.ID
}

// GetSteamID returns the value of SteamID.
func (s *Player) GetSteamID() string {
	return s.SteamID
}

// GetName returns the value of Name.
func (s *Player) GetName() string {
	return s.Name
}

// GetBans returns the value of Bans.
func (s *Player) GetBans() []PlayerBan {
	return s.Bans
}

// GetRecruitment returns the value of Recruitment.
func (s *Player) GetRecruitment() OptRecruitmentInfo {
	return s.Recruitment
}

// SetID sets the value of ID.
func (s *Player) SetID(val int) {
	s.ID = val
}

// SetSteamID sets the value of SteamID.
func (s *Player) SetSteamID(val string) {
	s.SteamID = val
}

// SetName sets the value of Name.
func (s *Player) SetName(val string) {
	s.Name = val
}

// SetBans sets the value of Bans.
func (s *Player) SetBans(val []PlayerBan) {
	s.Bans = val
}

// SetRecruitment sets the value of Recruitment.
func (s *Player) SetRecruitment(val OptRecruitmentInfo) {
	s.Recruitment = val
}

// Ref: #/components/schemas/PlayerBan
type PlayerBan struct {
	Start  int    `json:"start"`
	End    int    `json:"end"`
	Reason string `json:"reason"`
}

// GetStart returns the value of Start.
func (s *PlayerBan) GetStart() int {
	return s.Start
}

// GetEnd returns the value of End.
func (s *PlayerBan) GetEnd() int {
	return s.End
}

// GetReason returns the value of Reason.
func (s *PlayerBan) GetReason() string {
	return s.Reason
}

// SetStart sets the value of Start.
func (s *PlayerBan) SetStart(val int) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *PlayerBan) SetEnd(val int) {
	s.End = val
}

// SetReason sets the value of Reason.
func (s *PlayerBan) SetReason(val string) {
	s.Reason = val
}

// Ref: #/components/schemas/RecruitmentInfo
type RecruitmentInfo struct {
	Skill    string      `json:"skill"`
	URL      string      `json:"url"`
	Classes  []GameClass `json:"classes"`
	GameMode string      `json:"game_mode"`
}

// GetSkill returns the value of Skill.
func (s *RecruitmentInfo) GetSkill() string {
	return s.Skill
}

// GetURL returns the value of URL.
func (s *RecruitmentInfo) GetURL() string {
	return s.URL
}

// GetClasses returns the value of Classes.
func (s *RecruitmentInfo) GetClasses() []GameClass {
	return s.Classes
}

// GetGameMode returns the value of GameMode.
func (s *RecruitmentInfo) GetGameMode() string {
	return s.GameMode
}

// SetSkill sets the value of Skill.
func (s *RecruitmentInfo) SetSkill(val string) {
	s.Skill = val
}

// SetURL sets the value of URL.
func (s *RecruitmentInfo) SetURL(val string) {
	s.URL = val
}

// SetClasses sets the value of Classes.
func (s *RecruitmentInfo) SetClasses(val []GameClass) {
	s.Classes = val
}

// SetGameMode sets the value of GameMode.
func (s *RecruitmentInfo) SetGameMode(val string) {
	s.GameMode = val
}

// Ref: #/components/schemas/Team
type Team struct {
	Recruitment RecruitmentInfo `json:"recruitment"`
}

// GetRecruitment returns the value of Recruitment.
func (s *Team) GetRecruitment() RecruitmentInfo {
	return s.Recruitment
}

// SetRecruitment sets the value of Recruitment.
func (s *Team) SetRecruitment(val RecruitmentInfo) {
	s.Recruitment = val
}
